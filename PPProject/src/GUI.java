
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dell
 */
public class GUI extends javax.swing.JFrame {
	private static final Logger logging = Logger.getGlobal();
    /**
     * Creates new form GUI
     */
    public GUI() {
    	logging.log(Level.INFO, "GUI initComponents() called");
        initComponents();        
    }
    final JFrame parent = new JFrame();
    TvDbAPIManager tvDbAPIManager = new TvDbAPIManager();
    UserSeriesRepository userSeriesRepository = new UserSeriesRepository();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	logging.log(Level.FINE, "entered initComponents()");
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Search Show:");

        jButton1.setText("List My Shows");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add Show");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton5.setText("Search");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Show");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jMenu1.setText("File");

        jMenuItem1.setText("User Preferences");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(29, 29, 29)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
        logging.log(Level.INFO, "GUI Created");
    }// </editor-fold>                        
    
    ArrayList<String> showlist = new ArrayList<String>();    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	logging.log(Level.FINER, "jButton1ActionPerformed", evt);
    	UserSeriesRepository userRep=new UserSeriesRepository();
    	allUserShows=userRep.findAllLatestEpisodes();
    	final String[] shows=new String[allUserShows.size()];
        for(int i=0;i<allUserShows.size();i++)
        {
        	shows[i]=allUserShows.get(i).seriesName;
        }
        //jList2.setModel(model);
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings =shows;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });

    }                                        

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    	logging.log(Level.FINER, "jMenuItem1ActionPerformed", evt);
    	UserPreferences userPreferences=new UserPreferences();
        String downloadLocation=JOptionPane.showInputDialog(parent, "Enter download location:");
        String updateInterval=JOptionPane.showInputDialog(parent,"Enter update interval");
        userPreferences.setDownloadLocation(downloadLocation);
        userPreferences.setUpdateInterval(Long.parseLong(updateInterval));        
    }         
    
    private Status downloadLatestEpisode(UserSeriesList newUserShow)
    {
<<<<<<< HEAD
    	Status status=Status.INPROGRESS;
=======
    	logging.entering(GUI.class.getName(),"downloadLatestAndUpdateRepository" , newUserShow);
>>>>>>> origin/latest
    	System.out.println("Sending data.."+newUserShow.getLastEpisodeDownloaded().getSeason()+" "+ newUserShow.getLastEpisodeDownloaded().getEpisodeNumber());
    	Status linkStatus=spider.search(newUserShow.getSeriesInfo().getSeriesName(),newUserShow.getLastEpisodeDownloaded().getSeason(), newUserShow.getLastEpisodeDownloaded().getEpisodeNumber());
		if(linkStatus == Status.LINK_FOUND){
			String downloadLink = spider.getMagnetLink();
			torrentClient.startDownload(downloadLink);
			status=Status.SUCCESS;
		}
		return status;
    }
    
    private void showUserShows()
    {
    	UserSeriesRepository userRep=new UserSeriesRepository();
    	allUserShows=userRep.findAllLatestEpisodes();
    	final String[] shows=new String[allUserShows.size()];
        for(int i=0;i<allUserShows.size();i++)
        {
        	shows[i]=allUserShows.get(i).seriesName;
        }
        //jList2.setModel(model);
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings =shows;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
    }

    
    //Adds show to user show list and calls torrent client for specified season and episode
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	logging.log(Level.FINER, "jButton2ActionPerformed", evt);
        String seasoninput = JOptionPane.showInputDialog(parent, "Enter Starting Season to be downloaded");
        int season = Integer.parseInt(seasoninput);
        String episodeinput = JOptionPane.showInputDialog(parent,"Enter Starting Episode to be downloaded");
        int episodeNumber = Integer.parseInt(episodeinput);
        UserSeriesRepository userRep=new UserSeriesRepository();
        Series selectedSeries=allSeries.get(jList2.getSelectedIndex());
        //System.out.println(jList2.getSelectedValue().toString());
        //System.out.println(jList2.getSelectedIndex());
        
        episodeList=tvDbAPIManager.searchSeries(selectedSeries);
        Episode latestEpisode=new Episode();
        Episode nextEpisode=new Episode();
        Date nextReleaseDate=null;
        int currentEpisodeIndex=0;
        for(int i=0;i<episodeList.size();i++)
        {
        	//System.out.println(episodeList.get(i).getEpisodeNumber());
        	if(episodeList.get(i).getSeason()==season&&episodeList.get(i).getEpisodeNumber()==episodeNumber)
        	{
        		latestEpisode=episodeList.get(i);
        		nextReleaseDate=episodeList.get(i+1).getepisodeAirDate();
        		System.out.println(latestEpisode.getepisodeAirDate());
        		currentEpisodeIndex=i;
        	}
        }
        UserSeriesList newUserShow=new UserSeriesList(selectedSeries,latestEpisode,nextReleaseDate);
        userRep.saveSeries(newUserShow);
        showUserShows();
        JOptionPane.showMessageDialog(parent,"Show added to MyShows: "+selectedSeries.getSeriesName());
        System.out.println(latestEpisode.getepisodeAirDate()+" "+selectedSeries.getSeriesName());
        
        Long currentDateInMillis=System.currentTimeMillis();
		Date currentDate=new Date(currentDateInMillis);
		if(currentDate.after(latestEpisode.getepisodeAirDate()))
		{
			downloadLatestEpisode(newUserShow);
		}
        //userRep.findAllLatestEpisodes();
		userRep.deleteSeries(selectedSeries);
		userRep.saveSeries(newUserShow);

        while(currentDate.after(nextReleaseDate))
		{

			if(episodeList.size()>currentEpisodeIndex+2)
    		{
				nextEpisode=episodeList.get(currentEpisodeIndex+1);
    			nextReleaseDate=episodeList.get(currentEpisodeIndex+2).getepisodeAirDate();
    		}
			else 
			{
				System.out.println("Next episode air date unavailable");
				//LOGGING
				break;
			}
			newUserShow.setLastEpisodeDownloaded(nextEpisode);
	        newUserShow.setNextEpisodeRelease(nextReleaseDate);
			downloadLatestEpisode(newUserShow);
			currentEpisodeIndex++;	
			userRep.deleteSeries(selectedSeries);
<<<<<<< HEAD
			userRep.saveSeries(newUserShow);
=======
			userRep.saveSeries(newUserShow);			
>>>>>>> origin/latest
		}
        System.out.println("CurrentEpisodeinRep"+nextEpisode.episodeNumber);

    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	logging.log(Level.FINER, "jButton5ActionPerformed", evt);
        allSeries=tvDbAPIManager.getAllAvailableSeries(jTextField1.getText());
        final String[] shows=new String[allSeries.size()];
        for(int i=0;i<allSeries.size();i++)
        {
        	shows[i]=allSeries.get(i).getSeriesName();
        }
        //jList2.setModel(model);
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings =shows;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        
    }                                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	logging.log(Level.FINER, "jButton3ActionPerformed", evt);
        Series selectedSeries=new Series();
        UserSeriesRepository removeUserShow=allUserShows.get(jList2.getSelectedIndex());
        selectedSeries.setSeriesID(removeUserShow.seriesID);
        selectedSeries.setSeriesName(removeUserShow.seriesName);

        UserSeriesRepository userRep=new UserSeriesRepository();
        userRep.deleteSeries(selectedSeries);
        
        allUserShows=userRep.findAllLatestEpisodes();
    	final String[] shows=new String[allUserShows.size()];
        for(int i=0;i<allUserShows.size();i++)
        {
        	shows[i]=allUserShows.get(i).seriesName;
        }
        //jList2.setModel(model);
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings =shows;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });

        // TODO add your handling code here:
    }    
    
    TorrentClient tC = new TorrentClient();
    
    private TorrentClient torrentClient = new TorrentClient();
    
    private Spider spider = new Spider();

    public void setAsBackground(String seriesName, int season, int episode){
<<<<<<< HEAD
        Status linkStatus = spider.search(seriesName, season, episode);
    	if (linkStatus == Status.LINK_FOUND){
	        String magnetLink = spider.getMagnetLink();
	        System.out.println("Link :"+ magnetLink);
	        torrentClient.startDownloadSilent(magnetLink);
    	}
=======
    	Object[] o = {seriesName, season, episode};
        logging.entering(GUI.class.getName(), "setAsBackground", o);
        String magnetLink = getMagnetLink.search(seriesName, season, episode);
        System.out.println("Link :"+ magnetLink);
        torrentClient.startDownloadSilent(magnetLink);
>>>>>>> origin/latest
    }


    public void setAsForeground(String seriesName, int season, int episode){
<<<<<<< HEAD

    	Status linkStatus = spider.search(seriesName, season, episode);
    	if (linkStatus == Status.LINK_FOUND){
	        String magnetLink = spider.getMagnetLink();
	        System.out.println("Link :"+ magnetLink);
	        torrentClient.startDownload(magnetLink);
    	}
=======
    	Object[] o = {seriesName, season, episode};
        logging.entering(GUI.class.getName(), "setAsForeground", o);
        String magnetLink = getMagnetLink.search(seriesName, season, episode);
        System.out.println("Link :"+ magnetLink);
        torrentClient.startDownload(magnetLink);
>>>>>>> origin/latest
    }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
        	logging.log(Level.SEVERE, null, ex);
            //java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
        	logging.log(Level.SEVERE, null, ex);
            //java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
        	logging.log(Level.SEVERE, null, ex);
            //java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        	logging.log(Level.SEVERE, null, ex);
            //java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	logging.log(Level.INFO, "GUI set to visible");
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    
    ArrayList<Series> allSeries=new ArrayList<Series>();
    ArrayList<Series> userSeries=new ArrayList<>();
    ArrayList<Episode> episodeList=new ArrayList<Episode>();
    List<UserSeriesRepository> allUserShows=new ArrayList<UserSeriesRepository>();
    // End of variables declaration                   




}
